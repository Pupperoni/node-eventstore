0 info it worked if it ends with ok
1 verbose cli [
1 verbose cli   '/usr/local/Cellar/node/13.6.0/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish',
1 verbose cli   '--access',
1 verbose cli   'public'
1 verbose cli ]
2 info using npm@3.10.8
3 info using node@v13.6.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/ryangoce/Work/Saperium/Code/node-eventstore',
7 silly cache add   type: 'directory'
7 silly cache add }
8 verbose addLocalDirectory /Users/ryangoce/.npm/@saperium/eventstore/1.15.3/package.tgz not in flight; packing
9 verbose correctMkdir /Users/ryangoce/.npm correctMkdir not in flight; initializing
10 info lifecycle @saperium/eventstore@1.15.3~prepublish: @saperium/eventstore@1.15.3
11 silly lifecycle @saperium/eventstore@1.15.3~prepublish: no script for prepublish, continuing
12 verbose tar pack [
12 verbose tar pack   '/Users/ryangoce/.npm/@saperium/eventstore/1.15.3/package.tgz',
12 verbose tar pack   '/Users/ryangoce/Work/Saperium/Code/node-eventstore'
12 verbose tar pack ]
13 verbose tarball /Users/ryangoce/.npm/@saperium/eventstore/1.15.3/package.tgz
14 verbose folder /Users/ryangoce/Work/Saperium/Code/node-eventstore
15 verbose addLocalTarball adding from inside cache /Users/ryangoce/.npm/@saperium/eventstore/1.15.3/package.tgz
16 verbose correctMkdir /Users/ryangoce/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd @saperium/eventstore@1.15.3
18 verbose afterAdd /Users/ryangoce/.npm/@saperium/eventstore/1.15.3/package/package.json not in flight; writing
19 verbose correctMkdir /Users/ryangoce/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/ryangoce/.npm/@saperium/eventstore/1.15.3/package/package.json written
21 silly publish {
21 silly publish   author: { name: 'adrai' },
21 silly publish   name: '@saperium/eventstore',
21 silly publish   version: '1.15.3',
21 silly publish   contributors: [
21 silly publish     { name: 'Adriano Raiano', email: 'adriano@raiano.ch' },
21 silly publish     { name: 'Jan Muehlemann', email: 'jan.muehlemann@gmail.com' }
21 silly publish   ],
21 silly publish   private: false,
21 silly publish   repository: {
21 silly publish     type: 'git',
21 silly publish     url: 'git+ssh://git@github.com/adrai/node-eventstore.git'
21 silly publish   },
21 silly publish   description: 'Node-eventstore is a node.js module for multiple databases. It can be very useful as eventstore if you work with (d)ddd, cqrs, eventsourcing, commands and events, etc.',
21 silly publish   keywords: [
21 silly publish     'cqrs',          'eventstore',
21 silly publish     'ddd',           '(d)ddd',
21 silly publish     'eventsourcing', 'mongodb',
21 silly publish     'redis',         'tingodb',
21 silly publish     'azure',         'azuretable',
21 silly publish     'inmemory',      'elasticsearch'
21 silly publish   ],
21 silly publish   main: './index.js',
21 silly publish   directories: { example: 'example', test: 'test' },
21 silly publish   engines: { node: '>=0.8.0' },
21 silly publish   dependencies: {
21 silly publish     async: '2.6.2',
21 silly publish     debug: '3.1.0',
21 silly publish     dotty: '0.0.2',
21 silly publish     jsondate: '0.0.1',
21 silly publish     lodash: '4.17.15',
21 silly publish     mysql: '^2.18.1',
21 silly publish     'parent-require': '1.0.0',
21 silly publish     tolerance: '1.0.0',
21 silly publish     uuid: '3.3.3'
21 silly publish   },
21 silly publish   devDependencies: {
21 silly publish     'aws-sdk': '>=2.4.9',
21 silly publish     'azure-storage': '>=0.10.0',
21 silly publish     cradle: '>=0.7.1',
21 silly publish     elasticsearch: '>=10.0.0',
21 silly publish     eslint: '>=1.0.0',
21 silly publish     'expect.js': '>=0.1.2',
21 silly publish     jasmine: '^3.5.0',
21 silly publish     mocha: '3.x.x',
21 silly publish     mongodb: '2.1.x',
21 silly publish     redis: '>=0.10.1',
21 silly publish     tingodb: '>=0.0.1'
21 silly publish   },
21 silly publish   scripts: {
21 silly publish     test: 'npm run test:adrai && npm run test:extensions',
21 silly publish     'test:adrai': 'mocha',
21 silly publish     'test:extensions': 'jasmine jasmine/*.jasmine-spec.js'
21 silly publish   },
21 silly publish   bugs: { url: 'https://github.com/adrai/node-eventstore/issues' },
21 silly publish   homepage: 'https://github.com/adrai/node-eventstore#readme',
21 silly publish   license: 'ISC',
21 silly publish   readme: '# Introduction\n' +
21 silly publish     '\n' +
21 silly publish     '[![JS.ORG](https://img.shields.io/badge/js.org-eventstore-ffb400.svg?style=flat-square)](http://js.org)\n' +
21 silly publish     '[![travis](https://img.shields.io/travis/adrai/node-eventstore.svg)](https://travis-ci.org/adrai/node-eventstore) [![npm](https://img.shields.io/npm/v/eventstore.svg)](https://npmjs.org/package/eventstore)\n' +
21 silly publish     '\n' +
21 silly publish     'The project goal is to provide an eventstore implementation for node.js:\n' +
21 silly publish     '\n' +
21 silly publish     '- load and store events via EventStream object\n' +
21 silly publish     '- event dispatching to your publisher (optional)\n' +
21 silly publish     '- supported Dbs (inmemory, mongodb, redis, tingodb, elasticsearch, azuretable, dynamodb)\n' +
21 silly publish     '- snapshot support\n' +
21 silly publish     '- query your events\n' +
21 silly publish     '\n' +
21 silly publish     '# Consumers\n' +
21 silly publish     '\n' +
21 silly publish     '- [cqrs-domain](https://github.com/adrai/node-cqrs-domain)\n' +
21 silly publish     '- [cqrs](https://github.com/leogiese/cqrs)\n' +
21 silly publish     '\n' +
21 silly publish     '# Installation\n' +
21 silly publish     '\n' +
21 silly publish     '    npm install eventstore\n' +
21 silly publish     '\n' +
21 silly publish     '# Usage\n' +
21 silly publish     '\n' +
21 silly publish     '## Require the module and init the eventstore:\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var eventstore = require('eventstore');\n" +
21 silly publish     '\n' +
21 silly publish     'var es = eventstore();\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'By default the eventstore will use an inmemory Storage.\n' +
21 silly publish     '\n' +
21 silly publish     '### Logging\n' +
21 silly publish     '\n' +
21 silly publish     'For logging and debugging you can use [debug](https://github.com/visionmedia/debug) by [TJ Holowaychuk](https://github.com/visionmedia)\n' +
21 silly publish     '\n' +
21 silly publish     'simply run your process with\n' +
21 silly publish     '\n' +
21 silly publish     '    DEBUG=eventstore* node app.js\n' +
21 silly publish     '\n' +
21 silly publish     '## Provide implementation for storage\n' +
21 silly publish     '\n' +
21 silly publish     'example with mongodb:\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var es = require('eventstore')({\n" +
21 silly publish     "  type: 'mongodb',\n" +
21 silly publish     "  host: 'localhost',                             // optional\n" +
21 silly publish     '  port: 27017,                                   // optional\n' +
21 silly publish     "  dbName: 'eventstore',                          // optional\n" +
21 silly publish     "  eventsCollectionName: 'events',                // optional\n" +
21 silly publish     "  snapshotsCollectionName: 'snapshots',          // optional\n" +
21 silly publish     "  transactionsCollectionName: 'transactions',    // optional\n" +
21 silly publish     '  timeout: 10000,                                // optional\n' +
21 silly publish     '  // emitStoreEvents: true                       // optional, by default no store events are emitted\n' +
21 silly publish     '  // maxSnapshotsCount: 3                        // optional, defaultly will keep all snapshots\n' +
21 silly publish     "  // authSource: 'authedicationDatabase'         // optional\n" +
21 silly publish     "  // username: 'technicalDbUser'                 // optional\n" +
21 silly publish     "  // password: 'secret'                          // optional\n" +
21 silly publish     "  // url: 'mongodb://user:pass@host:port/db?opts // optional\n" +
21 silly publish     "  // positionsCollectionName: 'positions'        // optional, defaultly wont keep position\n" +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'example with redis:\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var es = require('eventstore')({\n" +
21 silly publish     "  type: 'redis',\n" +
21 silly publish     "  host: 'localhost',                          // optional\n" +
21 silly publish     '  port: 6379,                                 // optional\n' +
21 silly publish     '  db: 0,                                      // optional\n' +
21 silly publish     "  prefix: 'eventstore',                       // optional\n" +
21 silly publish     "  eventsCollectionName: 'events',             // optional\n" +
21 silly publish     "  snapshotsCollectionName: 'snapshots',       // optional\n" +
21 silly publish     '  timeout: 10000                              // optional\n' +
21 silly publish     '  // emitStoreEvents: true,                   // optional, by default no store events are emitted\n' +
21 silly publish     '  // maxSnapshotsCount: 3                     // optional, defaultly will keep all snapshots\n' +
21 silly publish     "  // password: 'secret'                       // optional\n" +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'example with tingodb:\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var es = require('eventstore')({\n" +
21 silly publish     "  type: 'tingodb',\n" +
21 silly publish     "  dbPath: '/path/to/my/db/file',              // optional\n" +
21 silly publish     "  eventsCollectionName: 'events',             // optional\n" +
21 silly publish     "  snapshotsCollectionName: 'snapshots',       // optional\n" +
21 silly publish     "  transactionsCollectionName: 'transactions', // optional\n" +
21 silly publish     '  timeout: 10000,                             // optional\n' +
21 silly publish     '  // emitStoreEvents: true,                   // optional, by default no store events are emitted\n' +
21 silly publish     '  // maxSnapshotsCount: 3                     // optional, defaultly will keep all snapshots\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'example with elasticsearch:\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var es = require('eventstore')({\n" +
21 silly publish     "  type: 'elasticsearch',\n" +
21 silly publish     "  host: 'localhost:9200',                     // optional\n" +
21 silly publish     "  indexName: 'eventstore',                    // optional\n" +
21 silly publish     "  eventsTypeName: 'events',                   // optional\n" +
21 silly publish     "  snapshotsTypeName: 'snapshots',             // optional\n" +
21 silly publish     "  log: 'warning',                             // optional\n" +
21 silly publish     '  maxSearchResults: 10000,                    // optional\n' +
21 silly publish     '  // emitStoreEvents: true,                   // optional, by default no store events are emitted\n' +
21 silly publish     '  // maxSnapshotsCount: 3                     // optional, defaultly will keep all snapshots\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'example with custom elasticsearch client (e.g. with AWS ElasticSearch client. Note ``` http-aws-es ``` package usage in this example):\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var elasticsearch = require('elasticsearch');\n" +
21 silly publish     '\n' +
21 silly publish     'var esClient = = new elasticsearch.Client({\n' +
21 silly publish     "  hosts: 'SOMETHING.es.amazonaws.com',\n" +
21 silly publish     "  connectionClass: require('http-aws-es'),\n" +
21 silly publish     '  amazonES: {\n' +
21 silly publish     "    region: 'us-east-1',\n" +
21 silly publish     "    accessKey: 'REPLACE_AWS_accessKey',\n" +
21 silly publish     "    secretKey: 'REPLACE_AWS_secretKey'\n" +
21 silly publish     '  }\n' +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     "var es = require('eventstore')({\n" +
21 silly publish     "  type: 'elasticsearch',\n" +
21 silly publish     '  client: esClient,\n' +
21 silly publish     "  indexName: 'eventstore',\n" +
21 silly publish     "  eventsTypeName: 'events',\n" +
21 silly publish     "  snapshotsTypeName: 'snapshots',\n" +
21 silly publish     "  log: 'warning',\n" +
21 silly publish     '  maxSearchResults: 10000\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'example with azuretable:\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var es = require('eventstore')({\n" +
21 silly publish     "  type: 'azuretable',\n" +
21 silly publish     "  storageAccount: 'nodeeventstore',\n" +
21 silly publish     "  storageAccessKey: 'aXJaod96t980AbNwG9Vh6T3ewPQnvMWAn289Wft9RTv+heXQBxLsY3Z4w66CI7NN12+1HUnHM8S3sUbcI5zctg==',\n" +
21 silly publish     "  storageTableHost: 'https://nodeeventstore.table.core.windows.net/',\n" +
21 silly publish     "  eventsTableName: 'events',               // optional\n" +
21 silly publish     "  snapshotsTableName: 'snapshots',         // optional\n" +
21 silly publish     '  timeout: 10000,                          // optional\n' +
21 silly publish     '  emitStoreEvents: true                    // optional, by default no store events are emitted\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'example with dynamodb:\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var es = require('eventstore')({\n" +
21 silly publish     "    type: 'dynamodb',\n" +
21 silly publish     "    eventsTableName: 'events',                  // optional\n" +
21 silly publish     "    snapshotsTableName: 'snapshots',            // optional\n" +
21 silly publish     "    undispatchedEventsTableName: 'undispatched' // optional\n" +
21 silly publish     '    EventsReadCapacityUnits: 1,                 // optional\n' +
21 silly publish     '    EventsWriteCapacityUnits: 3,                // optional\n' +
21 silly publish     '    SnapshotReadCapacityUnits: 1,               // optional\n' +
21 silly publish     '    SnapshotWriteCapacityUnits: 3,              // optional\n' +
21 silly publish     '    UndispatchedEventsReadCapacityUnits: 1,     // optional\n' +
21 silly publish     '    UndispatchedEventsReadCapacityUnits: 1,     // optional\n' +
21 silly publish     '    useUndispatchedEventsTable: true            // optional\n' +
21 silly publish     '    eventsTableStreamEnabled: false             // optional\n' +
21 silly publish     "    eventsTableStreamViewType: 'NEW_IMAGE',     // optional\n" +
21 silly publish     '    emitStoreEvents: true                       // optional, by default no store events are emitted\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'DynamoDB credentials are obtained by eventstore either from environment vars or credentials file. For setup see [AWS Javascript SDK](http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html).\n' +
21 silly publish     '\n' +
21 silly publish     'DynamoDB provider supports [DynamoDB local](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html) for local development via the AWS SDK `endpoint` option. Just set the `$AWS_DYNAMODB_ENDPOINT` (or `%AWS_DYNAMODB_ENDPOINT%` in Windows) environment variable to point to your running instance of Dynamodb local like this:\n' +
21 silly publish     '\n' +
21 silly publish     '    $ export AWS_DYNAMODB_ENDPOINT=http://localhost:8000\n' +
21 silly publish     '\n' +
21 silly publish     'Or on Windows:\n' +
21 silly publish     '\n' +
21 silly publish     '    > set AWS_DYNAMODB_ENDPOINT=http://localhost:8000\n' +
21 silly publish     '\n' +
21 silly publish     'The **useUndispatchedEventsTable** option to available for those who prefer to use DyanmoDB.Streams to pull events from the store instead of the UndispatchedEvents table. The default is true. Setting this option to false will result in the UndispatchedEvents table not being created at all, the getUndispatchedEvents method will always return an empty array, and the setEventToDispatched will effectively do nothing.\n' +
21 silly publish     '\n' +
21 silly publish     'Refer to [StreamViewType](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_StreamSpecification.html#DDB-Type-StreamSpecification-StreamViewType) for a description of the **eventsTableStreamViewType** option\n' +
21 silly publish     '\n' +
21 silly publish     '## Built-in event publisher (optional)\n' +
21 silly publish     '\n' +
21 silly publish     'if defined the eventstore will try to publish AND set event do dispatched on its own...\n' +
21 silly publish     '\n' +
21 silly publish     '### sync interface\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'es.useEventPublisher(function(evt) {\n' +
21 silly publish     "  // bus.emit('event', evt);\n" +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '### async interface\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'es.useEventPublisher(function(evt, callback) {\n' +
21 silly publish     "  // bus.sendAndWaitForAck('event', evt, callback);\n" +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '## catch connect and disconnect events\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "es.on('connect', function() {\n" +
21 silly publish     "  console.log('storage connected');\n" +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     "es.on('disconnect', function() {\n" +
21 silly publish     "  console.log('connection to storage is gone');\n" +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '## define event mappings [optional]\n' +
21 silly publish     '\n' +
21 silly publish     'Define which values should be mapped/copied to the payload event.\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'es.defineEventMappings({\n' +
21 silly publish     "  id: 'id',\n" +
21 silly publish     "  commitId: 'commitId',\n" +
21 silly publish     "  commitSequence: 'commitSequence',\n" +
21 silly publish     "  commitStamp: 'commitStamp',\n" +
21 silly publish     "  streamRevision: 'streamRevision'\n" +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '## initialize\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'es.init(function (err) {\n' +
21 silly publish     '  // this callback is called when all is ready...\n' +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     '// or\n' +
21 silly publish     '\n' +
21 silly publish     'es.init(); // callback is optional\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '## working with the eventstore\n' +
21 silly publish     '\n' +
21 silly publish     '### get the eventhistory (of an aggregate)\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "es.getEventStream('streamId', function(err, stream) {\n" +
21 silly publish     '  var history = stream.events; // the original event will be in events[i].payload\n' +
21 silly publish     '\n' +
21 silly publish     '  // myAggregate.loadFromHistory(history);\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'or\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'es.getEventStream({\n' +
21 silly publish     "  aggregateId: 'myAggregateId',\n" +
21 silly publish     "  aggregate: 'person',          // optional\n" +
21 silly publish     "  context: 'hr'                 // optional\n" +
21 silly publish     '}, function(err, stream) {\n' +
21 silly publish     '  var history = stream.events; // the original event will be in events[i].payload\n' +
21 silly publish     '\n' +
21 silly publish     '  // myAggregate.loadFromHistory(history);\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     "'streamId' and 'aggregateId' are the same...\n" +
21 silly publish     'In ddd terms aggregate and context are just to be more precise in language.\n' +
21 silly publish     "For example you can have a 'person' aggregate in the context 'human ressources' and a 'person' aggregate in the context of 'business contracts'...\n" +
21 silly publish     'So you can have 2 complete different aggregate instances of 2 complete different aggregates (but perhaps with same name) in 2 complete different contexts\n' +
21 silly publish     '\n' +
21 silly publish     "you can request an eventstream even by limit the query with a 'minimum revision number' and a 'maximum revision number'\n" +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'var revMin = 5,\n' +
21 silly publish     '    revMax = 8; // if you omit revMax or you define it as -1 it will retrieve until the end\n' +
21 silly publish     '\n' +
21 silly publish     "es.getEventStream('streamId' || {/* query */}, revMin, revMax, function(err, stream) {\n" +
21 silly publish     '  var history = stream.events; // the original event will be in events[i].payload\n' +
21 silly publish     '\n' +
21 silly publish     '  // myAggregate.loadFromHistory(history);\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'store a new event and commit it to store\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "es.getEventStream('streamId', function(err, stream) {\n" +
21 silly publish     "  stream.addEvent({ my: 'event' });\n" +
21 silly publish     "  stream.addEvents([{ my: 'event2' }]);\n" +
21 silly publish     '\n' +
21 silly publish     '  stream.commit();\n' +
21 silly publish     '\n' +
21 silly publish     '  // or\n' +
21 silly publish     '\n' +
21 silly publish     '  stream.commit(function(err, stream) {\n' +
21 silly publish     '    console.log(stream.eventsToDispatch); // this is an array containing all added events in this commit.\n' +
21 silly publish     '  });\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'if you defined an event publisher function the committed event will be dispatched to the provided publisher\n' +
21 silly publish     '\n' +
21 silly publish     'if you just want to load the last event as stream you can call getLastEventAsStream instead of ´getEventStream´.\n' +
21 silly publish     '\n' +
21 silly publish     '## working with snapshotting\n' +
21 silly publish     '\n' +
21 silly publish     'get snapshot and eventhistory from the snapshot point\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "es.getFromSnapshot('streamId', function(err, snapshot, stream) {\n" +
21 silly publish     '  var snap = snapshot.data;\n' +
21 silly publish     '  var history = stream.events; // events history from given snapshot\n' +
21 silly publish     '\n' +
21 silly publish     '  // myAggregate.loadSnapshot(snap);\n' +
21 silly publish     '  // myAggregate.loadFromHistory(history);\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'or\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'es.getFromSnapshot({\n' +
21 silly publish     "  aggregateId: 'myAggregateId',\n" +
21 silly publish     "  aggregate: 'person',          // optional\n" +
21 silly publish     "  context: 'hr'                 // optional\n" +
21 silly publish     '}, function(err, snapshot, stream) {\n' +
21 silly publish     '  var snap = snapshot.data;\n' +
21 silly publish     '  var history = stream.events; // events history from given snapshot\n' +
21 silly publish     '\n' +
21 silly publish     '  // myAggregate.loadSnapshot(snap);\n' +
21 silly publish     '  // myAggregate.loadFromHistory(history);\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     "you can request a snapshot and an eventstream even by limit the query with a 'maximum revision number'\n" +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'var revMax = 8; // if you omit revMax or you define it as -1 it will retrieve until the end\n' +
21 silly publish     '\n' +
21 silly publish     "es.getFromSnapshot('streamId' || {/* query */}, revMax, function(err, snapshot, stream) {\n" +
21 silly publish     '  var snap = snapshot.data;\n' +
21 silly publish     '  var history = stream.events; // events history from given snapshot\n' +
21 silly publish     '\n' +
21 silly publish     '  // myAggregate.loadSnapshot(snap);\n' +
21 silly publish     '  // myAggregate.loadFromHistory(history);\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '\n' +
21 silly publish     'create a snapshot point\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "es.getFromSnapshot('streamId', function(err, snapshot, stream) {\n" +
21 silly publish     '\n' +
21 silly publish     '  var snap = snapshot.data;\n' +
21 silly publish     '  var history = stream.events; // events history from given snapshot\n' +
21 silly publish     '\n' +
21 silly publish     '  // myAggregate.loadSnapshot(snap);\n' +
21 silly publish     '  // myAggregate.loadFromHistory(history);\n' +
21 silly publish     '\n' +
21 silly publish     '  // create a new snapshot depending on your rules\n' +
21 silly publish     '  if (history.length > myLimit) {\n' +
21 silly publish     '    es.createSnapshot({\n' +
21 silly publish     "      streamId: 'streamId',\n" +
21 silly publish     '      data: myAggregate.getSnap(),\n' +
21 silly publish     '      revision: stream.lastRevision,\n' +
21 silly publish     '      version: 1 // optional\n' +
21 silly publish     '    }, function(err) {\n' +
21 silly publish     '      // snapshot saved\n' +
21 silly publish     '    });\n' +
21 silly publish     '\n' +
21 silly publish     '    // or\n' +
21 silly publish     '\n' +
21 silly publish     '    es.createSnapshot({\n' +
21 silly publish     "      aggregateId: 'myAggregateId',\n" +
21 silly publish     "      aggregate: 'person',          // optional\n" +
21 silly publish     "      context: 'hr'                 // optional\n" +
21 silly publish     '      data: myAggregate.getSnap(),\n' +
21 silly publish     '      revision: stream.lastRevision,\n' +
21 silly publish     '      version: 1 // optional\n' +
21 silly publish     '    }, function(err) {\n' +
21 silly publish     '      // snapshot saved\n' +
21 silly publish     '    });\n' +
21 silly publish     '  }\n' +
21 silly publish     '\n' +
21 silly publish     '  // go on: store new event and commit it\n' +
21 silly publish     '  // stream.addEvents...\n' +
21 silly publish     '\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'You can automatically clean older snapshots by configuring the number of snapshots to keep with `maxSnapshotsCount` in `eventstore` options.\n' +
21 silly publish     '\n' +
21 silly publish     '## own event dispatching (no event publisher function defined)\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'es.getUndispatchedEvents(function(err, evts) {\n' +
21 silly publish     "  // or es.getUndispatchedEvents('streamId', function(err, evts) {\n" +
21 silly publish     '  // or es.getUndispatchedEvents({ // free choice (all, only context, only aggregate, only aggregateId...)\n' +
21 silly publish     "  //                                context: 'hr',\n" +
21 silly publish     "  //                                aggregate: 'person',\n" +
21 silly publish     "  //                                aggregateId: 'uuid'\n" +
21 silly publish     '  //                              }, function(err, evts) {\n' +
21 silly publish     '\n' +
21 silly publish     '  // all undispatched events\n' +
21 silly publish     '  console.log(evts);\n' +
21 silly publish     '\n' +
21 silly publish     '  // dispatch it and set the event as dispatched\n' +
21 silly publish     '\n' +
21 silly publish     '  for (var e in evts) {\n' +
21 silly publish     '    var evt = evts[r];\n' +
21 silly publish     '    es.setEventToDispatched(evt, function(err) {});\n' +
21 silly publish     '    // or\n' +
21 silly publish     '    es.setEventToDispatched(evt.id, function(err) {});\n' +
21 silly publish     '  }\n' +
21 silly publish     '\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '## query your events\n' +
21 silly publish     '\n' +
21 silly publish     'for replaying your events or for rebuilding a viewmodel or just for fun...\n' +
21 silly publish     '\n' +
21 silly publish     'skip, limit always optional\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'var skip = 0,\n' +
21 silly publish     '    limit = 100; // if you omit limit or you define it as -1 it will retrieve until the end\n' +
21 silly publish     '\n' +
21 silly publish     'es.getEvents(skip, limit, function(err, evts) {\n' +
21 silly publish     '  // if (events.length === amount) {\n' +
21 silly publish     '  //   events.next(function (err, nextEvts) {}); // just call next to retrieve the next page...\n' +
21 silly publish     '  // } else {\n' +
21 silly publish     '  //   // finished...\n' +
21 silly publish     '  // }\n' +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     '// or\n' +
21 silly publish     '\n' +
21 silly publish     "es.getEvents('streamId', skip, limit, function(err, evts) {\n" +
21 silly publish     '  // if (events.length === amount) {\n' +
21 silly publish     '  //   events.next(function (err, nextEvts) {}); // just call next to retrieve the next page...\n' +
21 silly publish     '  // } else {\n' +
21 silly publish     '  //   // finished...\n' +
21 silly publish     '  // }\n' +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     '// or\n' +
21 silly publish     '\n' +
21 silly publish     'es.getEvents({ // free choice (all, only context, only aggregate, only aggregateId...)\n' +
21 silly publish     "  context: 'hr',\n" +
21 silly publish     "  aggregate: 'person',\n" +
21 silly publish     "  aggregateId: 'uuid'\n" +
21 silly publish     '}, skip, limit, function(err, evts) {\n' +
21 silly publish     '  // if (events.length === amount) {\n' +
21 silly publish     '  //   events.next(function (err, nextEvts) {}); // just call next to retrieve the next page...\n' +
21 silly publish     '  // } else {\n' +
21 silly publish     '  //   // finished...\n' +
21 silly publish     '  // }\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'by revision\n' +
21 silly publish     '\n' +
21 silly publish     'revMin, revMax always optional\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'var revMin = 5,\n' +
21 silly publish     '    revMax = 8; // if you omit revMax or you define it as -1 it will retrieve until the end\n' +
21 silly publish     '\n' +
21 silly publish     "es.getEventsByRevision('streamId', revMin, revMax, function(err, evts) {});\n" +
21 silly publish     '\n' +
21 silly publish     '// or\n' +
21 silly publish     '\n' +
21 silly publish     'es.getEventsByRevision({\n' +
21 silly publish     "  aggregateId: 'myAggregateId',\n" +
21 silly publish     "  aggregate: 'person',          // optional\n" +
21 silly publish     "  context: 'hr'                 // optional\n" +
21 silly publish     '}, revMin, revMax, function(err, evts) {});\n' +
21 silly publish     '```\n' +
21 silly publish     'by commitStamp\n' +
21 silly publish     '\n' +
21 silly publish     'skip, limit always optional\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'var skip = 0,\n' +
21 silly publish     '    limit = 100; // if you omit limit or you define it as -1 it will retrieve until the end\n' +
21 silly publish     '\n' +
21 silly publish     'es.getEventsSince(new Date(2015, 5, 23), skip, limit, function(err, evts) {\n' +
21 silly publish     '  // if (events.length === amount) {\n' +
21 silly publish     '  //   events.next(function (err, nextEvts) {}); // just call next to retrieve the next page...\n' +
21 silly publish     '  // } else {\n' +
21 silly publish     '  //   // finished...\n' +
21 silly publish     '  // }\n' +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     '// or\n' +
21 silly publish     '\n' +
21 silly publish     'es.getEventsSince(new Date(2015, 5, 23), limit, function(err, evts) {\n' +
21 silly publish     '  // if (events.length === amount) {\n' +
21 silly publish     '  //   events.next(function (err, nextEvts) {}); // just call next to retrieve the next page...\n' +
21 silly publish     '  // } else {\n' +
21 silly publish     '  //   // finished...\n' +
21 silly publish     '  // }\n' +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     '// or\n' +
21 silly publish     '\n' +
21 silly publish     'es.getEventsSince(new Date(2015, 5, 23), function(err, evts) {\n' +
21 silly publish     '  // if (events.length === amount) {\n' +
21 silly publish     '  //   events.next(function (err, nextEvts) {}); // just call next to retrieve the next page...\n' +
21 silly publish     '  // } else {\n' +
21 silly publish     '  //   // finished...\n' +
21 silly publish     '  // }\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '## streaming your events\n' +
21 silly publish     'Some databases support streaming your events, the api is similar to the query one\n' +
21 silly publish     '\n' +
21 silly publish     'skip, limit always optional\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'var skip = 0,\n' +
21 silly publish     '    limit = 100; // if you omit limit or you define it as -1 it will retrieve until the end\n' +
21 silly publish     '\n' +
21 silly publish     'var stream = es.streamEvents(skip, limit);\n' +
21 silly publish     '// or\n' +
21 silly publish     "var stream = es.streamEvents('streamId', skip, limit);\n" +
21 silly publish     '// or by commitstamp\n' +
21 silly publish     'var stream = es.streamEventsSince(new Date(2015, 5, 23), skip, limit);\n' +
21 silly publish     '// or by revision\n' +
21 silly publish     'var stream = es.streamEventsByRevision({\n' +
21 silly publish     "  aggregateId: 'myAggregateId',\n" +
21 silly publish     "  aggregate: 'person',\n" +
21 silly publish     "  context: 'hr',\n" +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     "stream.on('data', function(e) {\n" +
21 silly publish     '  doSomethingWithEvent(e);\n' +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     "stream.on('end', function() {\n" +
21 silly publish     "  console.log('no more evets');\n" +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     '// or even better\n' +
21 silly publish     'stream.pipe(myWritableStream);\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'currently supported by:\n' +
21 silly publish     '\n' +
21 silly publish     '1. mongodb\n' +
21 silly publish     '\n' +
21 silly publish     '## get the last event\n' +
21 silly publish     'for example to obtain the last revision nr\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "es.getLastEvent('streamId', function(err, evt) {\n" +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     '// or\n' +
21 silly publish     '\n' +
21 silly publish     'es.getLastEvent({ // free choice (all, only context, only aggregate, only aggregateId...)\n' +
21 silly publish     "  context: 'hr',\n" +
21 silly publish     "  aggregate: 'person',\n" +
21 silly publish     "  aggregateId: 'uuid'\n" +
21 silly publish     '} function(err, evt) {\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '## obtain a new id\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'es.getNewId(function(err, newId) {\n' +
21 silly publish     '  if(err) {\n' +
21 silly publish     "    console.log('ohhh :-(');\n" +
21 silly publish     '    return;\n' +
21 silly publish     '  }\n' +
21 silly publish     '\n' +
21 silly publish     "  console.log('the new id is: ' + newId);\n" +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '## position of event in store\n' +
21 silly publish     '\n' +
21 silly publish     'some db implementations support writing the position of the event in the whole store additional to the streamRevision.\n' +
21 silly publish     '\n' +
21 silly publish     'currently those implementations support this:\n' +
21 silly publish     '\n' +
21 silly publish     '1. inmemory ( by setting ```trackPosition`` option )\n' +
21 silly publish     '1. mongodb ( by setting ```positionsCollectionName``` option)\n' +
21 silly publish     '\n' +
21 silly publish     '## special scaling handling with mongodb\n' +
21 silly publish     '\n' +
21 silly publish     'Inserting multiple events (documents) in mongodb, is not atomic.\n' +
21 silly publish     'For the eventstore tries to repair itself when calling `getEventsByRevision`.\n' +
21 silly publish     'But if you want you can trigger this from outside:\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     'es.store.getPendingTransactions(function(err, txs) {\n' +
21 silly publish     '  if(err) {\n' +
21 silly publish     "    console.log('ohhh :-(');\n" +
21 silly publish     '    return;\n' +
21 silly publish     '  }\n' +
21 silly publish     '\n' +
21 silly publish     '  // txs is an array of objects like:\n' +
21 silly publish     '  // {\n' +
21 silly publish     "  //   _id: '/* the commitId of the committed event stream */',\n" +
21 silly publish     '  //   events: [ /* all events of the committed event stream */ ],\n' +
21 silly publish     "  //   aggregateId: 'aggregateId',\n" +
21 silly publish     "  //   aggregate: 'aggregate', // optional\n" +
21 silly publish     "  //   context: 'context'      // optional\n" +
21 silly publish     '  // }\n' +
21 silly publish     '\n' +
21 silly publish     '  es.store.getLastEvent({\n' +
21 silly publish     '    aggregateId: txs[0].aggregateId,\n' +
21 silly publish     '    aggregate: txs[0].aggregate, // optional\n' +
21 silly publish     '    context: txs[0].context      // optional\n' +
21 silly publish     '  }, function (err, lastEvent) {\n' +
21 silly publish     '    if(err) {\n' +
21 silly publish     "      console.log('ohhh :-(');\n" +
21 silly publish     '      return;\n' +
21 silly publish     '    }\n' +
21 silly publish     '\n' +
21 silly publish     '    es.store.repairFailedTransaction(lastEvent, function (err) {\n' +
21 silly publish     '      if(err) {\n' +
21 silly publish     "        console.log('ohhh :-(');\n" +
21 silly publish     '        return;\n' +
21 silly publish     '      }\n' +
21 silly publish     '\n' +
21 silly publish     "      console.log('everything is fine');\n" +
21 silly publish     '    });\n' +
21 silly publish     '  });\n' +
21 silly publish     '});\n' +
21 silly publish     '```\n' +
21 silly publish     '## Catch before and after eventstore events\n' +
21 silly publish     'Optionally the eventstore can emit brefore and after events, to enable this feature set the `emitStoreEvents` to true.\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var eventstore = require('eventstore');\n" +
21 silly publish     'var es = eventstore({\n' +
21 silly publish     '  emitStoreEvents: true,\n' +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     "es.on('before-clear', function({milliseconds}) {});\n" +
21 silly publish     "es.on('after-clear', function({milliseconds}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-next-positions', function({milliseconds, arguments: [positions]}) {});\n" +
21 silly publish     "es.on('after-get-next-positions', function({milliseconds, arguments: [positions]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-add-events', function({milliseconds, arguments: [events]}) {});\n" +
21 silly publish     "es.on('after-add-events', function(milliseconds, arguments: [events]) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-events', function({milliseconds, arguments: [query, skip, limit]}) {});\n" +
21 silly publish     "es.on('after-get-events', function({milliseconds, arguments: [query, skip, limit]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-events-since', function({milliseconds, arguments: [milliseconds, date, skip, limit]}) {});\n" +
21 silly publish     "es.on('after-get-events-since', function({milliseconds, arguments: [date, skip, limit]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-events-by-revision', function({milliseconds, arguments: [query, revMin, revMax]}) {});\n" +
21 silly publish     "es.on('after-get-events-by-revision', function({milliseconds, arguments, [query, revMin, revMax]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-last-event', function({milliseconds, arguments: [query]}) {});\n" +
21 silly publish     "es.on('after-get-last-event', function({milliseconds, arguments: [query]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-undispatched-events', function({milliseconds, arguments: [query]}) {});\n" +
21 silly publish     "es.on('after-get-undispatched-events', function({milliseconds, arguments: [query]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-set-event-to-dispatched', function({milliseconds, arguments: [id]}) {});\n" +
21 silly publish     "es.on('after-set-event-to-dispatched', function({milliseconds, arguments: [id]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-add-snapshot', function({milliseconds, arguments: [snap]}) {});\n" +
21 silly publish     "es.on('after-add-snapshot', function({milliseconds, arguments: [snap]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-clean-snapshots', function({milliseconds, arguments: [query]}) {});\n" +
21 silly publish     "es.on('after-clean-snapshots', function({milliseconds, arguments: [query]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-snapshot', function({milliseconds, arguments: [query, revMax]}) {});\n" +
21 silly publish     "es.on('after-get-snapshot', function({milliseconds, arguments: [query, revMax]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-remove-transactions', function({milliseconds}, arguments: [event]) {});\n" +
21 silly publish     "es.on('after-remove-transactions', function({milliseconds}, arguments: [event]) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-pending-transactions', function({milliseconds}) {});\n" +
21 silly publish     "es.on('after-get-pending-transactions', function({milliseconds}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-repair-failed-transactions', function({milliseconds, arguments: [lastEvt]}) {});\n" +
21 silly publish     "es.on('after-repair-failed-transactions', function({milliseconds, arguments: [lastEvt]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-remove-tables', function({milliseconds}) {});\n" +
21 silly publish     "es.on('after-remove-tables', function({milliseconds}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-stream-events', function({milliseconds, arguments: [query, skip, limit]}) {});\n" +
21 silly publish     "es.on('after-stream-events', function({milliseconds, arguments: [query, skip, limit]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-stream-events-since', function({milliseconds, arguments: [date, skip, limit]}) {});\n" +
21 silly publish     "es.on('after-stream-events-since', function({milliseconds, arguments: [date, skip, limit]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-event-stream', function({milliseconds, arguments: [query, revMin, revMax]}) {});\n" +
21 silly publish     "es.on('after-get-event-stream', function({milliseconds, arguments: [query, revMin, revMax]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-from-snapshot', function({milliseconds, arguments: [query, revMax]}) {});\n" +
21 silly publish     "es.on('after-get-from-snapshot', function({milliseconds, arguments: [query, revMax]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-create-snapshot', function({milliseconds, arguments: [obj]}) {});\n" +
21 silly publish     "es.on('after-create-snapshot', function({milliseconds, arguments: [obj]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-commit', function({milliseconds, arguments: [eventstream]}) {});\n" +
21 silly publish     "es.on('after-commit', function({milliseconds, arguments: [eventstream]}) {});\n" +
21 silly publish     '\n' +
21 silly publish     "es.on('before-get-last-event-as-stream', function({milliseconds, arguments: [query]}) {});\n" +
21 silly publish     "es.on('after-get-last-event-as-stream', function({milliseconds, arguments: [query]}) {});\n" +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '# Sample Integration\n' +
21 silly publish     '\n' +
21 silly publish     '- [nodeCQRS](https://github.com/jamuhl/nodeCQRS) A CQRS sample integrating eventstore\n' +
21 silly publish     '\n' +
21 silly publish     '# Inspiration\n' +
21 silly publish     '\n' +
21 silly publish     "- Jonathan Oliver's [EventStore](https://github.com/joliver/EventStore) for .net.\n" +
21 silly publish     '\n' +
21 silly publish     '# [Release notes](https://github.com/adrai/node-eventstore/blob/master/releasenotes.md)\n' +
21 silly publish     '\n' +
21 silly publish     '# Database Support\n' +
21 silly publish     '\n' +
21 silly publish     'Currently these databases are supported:\n' +
21 silly publish     '\n' +
21 silly publish     '1. inmemory\n' +
21 silly publish     '2. mongodb ([node-mongodb-native](https://github.com/mongodb/node-mongodb-native))\n' +
21 silly publish     '3. redis ([redis](https://github.com/mranney/node_redis))\n' +
21 silly publish     '4. tingodb ([tingodb](https://github.com/sergeyksv/tingodb))\n' +
21 silly publish     '5. azuretable ([azure-storage](https://github.com/Azure/azure-storage-node))\n' +
21 silly publish     '6. dynamodb ([aws-sdk](https://github.com/aws/aws-sdk-js))\n' +
21 silly publish     '\n' +
21 silly publish     '## own db implementation\n' +
21 silly publish     '\n' +
21 silly publish     'You can use your own db implementation by extending this...\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var Store = require('eventstore').Store,\n" +
21 silly publish     "    util = require('util'),\n" +
21 silly publish     "    _ = require('lodash');\n" +
21 silly publish     '\n' +
21 silly publish     'function MyDB(options) {\n' +
21 silly publish     '  options = options || {};\n' +
21 silly publish     '  Store.call(this, options);\n' +
21 silly publish     '}\n' +
21 silly publish     '\n' +
21 silly publish     'util.inherits(MyDB, Store);\n' +
21 silly publish     '\n' +
21 silly publish     '_.extend(MyDB.prototype, {\n' +
21 silly publish     '\n' +
21 silly publish     '  // ...\n' +
21 silly publish     '\n' +
21 silly publish     '});\n' +
21 silly publish     '\n' +
21 silly publish     'module.exports = MyDB;\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     'and you can use it in this way\n' +
21 silly publish     '\n' +
21 silly publish     '```javascript\n' +
21 silly publish     "var es = require('eventstore')({\n" +
21 silly publish     '  type: MyDB\n' +
21 silly publish     '});\n' +
21 silly publish     '// es.init...\n' +
21 silly publish     '```\n' +
21 silly publish     '\n' +
21 silly publish     '# License\n' +
21 silly publish     '\n' +
21 silly publish     'Copyright (c) 2018 Adriano Raiano, Jan Muehlemann\n' +
21 silly publish     '\n' +
21 silly publish     'Permission is hereby granted, free of charge, to any person obtaining a copy\n' +
21 silly publish     'of this software and associated documentation files (the "Software"), to deal\n' +
21 silly publish     'in the Software without restriction, including without limitation the rights\n' +
21 silly publish     'to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n' +
21 silly publish     'copies of the Software, and to permit persons to whom the Software is\n' +
21 silly publish     'furnished to do so, subject to the following conditions:\n' +
21 silly publish     '\n' +
21 silly publish     'The above copyright notice and this permission notice shall be included in\n' +
21 silly publish     'all copies or substantial portions of the Software.\n' +
21 silly publish     '\n' +
21 silly publish     'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n' +
21 silly publish     'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n' +
21 silly publish     'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n' +
21 silly publish     'AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n' +
21 silly publish     'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n' +
21 silly publish     'OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n' +
21 silly publish     'THE SOFTWARE.\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'f72a06275d47b1ef9ab30a3ce7011bd1f033659b',
21 silly publish   _id: '@saperium/eventstore@1.15.3',
21 silly publish   _shasum: '6ea46d6202a138a106466ae8d2df07e43dc01307',
21 silly publish   _from: '.'
21 silly publish }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name @saperium/eventstore
24 silly mapToRegistry scope (from package name) @saperium
25 verbose mapToRegistry no registry URL found in name for scope @saperium
26 silly mapToRegistry using default registry
27 silly mapToRegistry registry https://registry.npmjs.org/
28 silly mapToRegistry data Result {
28 silly mapToRegistry   raw: '@saperium/eventstore',
28 silly mapToRegistry   scope: '@saperium',
28 silly mapToRegistry   escapedName: '@saperium%2feventstore',
28 silly mapToRegistry   name: '@saperium/eventstore',
28 silly mapToRegistry   rawSpec: '',
28 silly mapToRegistry   spec: 'latest',
28 silly mapToRegistry   type: 'tag'
28 silly mapToRegistry }
29 silly mapToRegistry uri https://registry.npmjs.org/@saperium%2feventstore
30 verbose publish registryBase https://registry.npmjs.org/
31 silly publish uploading /Users/ryangoce/.npm/@saperium/eventstore/1.15.3/package.tgz
32 verbose request uri https://registry.npmjs.org/@saperium%2feventstore
33 verbose request sending authorization for write operation
34 info attempt registry request try #1 at 5:03:40 PM
35 verbose request using bearer token for auth
36 verbose request id 6258602bb281f61d
37 http request PUT https://registry.npmjs.org/@saperium%2feventstore
38 http 404 https://registry.npmjs.org/@saperium%2feventstore
39 verbose headers {
39 verbose headers   date: 'Wed, 20 May 2020 09:03:41 GMT',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'content-length': '27',
39 verbose headers   connection: 'keep-alive',
39 verbose headers   'set-cookie': [
39 verbose headers     '__cfduid=d849bfbcf7c6355b3e86a27fa1ec5bcbf1589965420; expires=Fri, 19-Jun-20 09:03:40 GMT; path=/; domain=.npmjs.org; HttpOnly; SameSite=Lax'
39 verbose headers   ],
39 verbose headers   'cf-ray': '5964e2c74838dd77-SIN',
39 verbose headers   'cf-cache-status': 'DYNAMIC',
39 verbose headers   'expect-ct': 'max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"',
39 verbose headers   vary: 'Accept-Encoding',
39 verbose headers   server: 'cloudflare',
39 verbose headers   'cf-request-id': '02d2ec108e0000dd773f252200000001'
39 verbose headers }
40 verbose request invalidating /Users/ryangoce/.npm/registry.npmjs.org/_40saperium_252feventstore on PUT
41 error publish Failed PUT 404
42 verbose stack Error: Scope not found : @saperium/eventstore
42 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
42 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
42 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:210:14)
42 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:187:22)
42 verbose stack     at Request.emit (events.js:321:20)
42 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1044:10)
42 verbose stack     at Request.emit (events.js:321:20)
42 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:965:12)
42 verbose stack     at IncomingMessage.emit (events.js:333:22)
42 verbose stack     at endReadableNT (_stream_readable.js:1220:12)
43 verbose statusCode 404
44 verbose pkgid @saperium/eventstore
45 verbose cwd /Users/ryangoce/Work/Saperium/Code/node-eventstore
46 error Darwin 19.5.0
47 error argv "/usr/local/Cellar/node/13.6.0/bin/node" "/usr/local/bin/npm" "publish" "--access" "public"
48 error node v13.6.0
49 error npm  v3.10.8
50 error code E404
51 error 404 Scope not found : @saperium/eventstore
52 error 404
53 error 404 '@saperium/eventstore' is not in the npm registry.
54 error 404 You should bug the author to publish it (or use the name yourself!)
55 error 404 Note that you can also install from a
56 error 404 tarball, folder, http url, or git url.
57 verbose exit [ 1, true ]
